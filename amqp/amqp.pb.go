// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/karelbilek/amqp-test-server/amqp/amqp.proto

package amqp

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FieldValuePair struct {
	Key                  *string     `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                *FieldValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FieldValuePair) Reset()         { *m = FieldValuePair{} }
func (m *FieldValuePair) String() string { return proto.CompactTextString(m) }
func (*FieldValuePair) ProtoMessage()    {}
func (*FieldValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9f2c77c6b97bfe, []int{0}
}
func (m *FieldValuePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValuePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValuePair.Merge(m, src)
}
func (m *FieldValuePair) XXX_Size() int {
	return m.Size()
}
func (m *FieldValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValuePair proto.InternalMessageInfo

type Table struct {
	Table                []*FieldValuePair `protobuf:"bytes,1,rep,name=table" json:"table,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9f2c77c6b97bfe, []int{1}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

type FieldArray struct {
	Value                []*FieldValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FieldArray) Reset()         { *m = FieldArray{} }
func (m *FieldArray) String() string { return proto.CompactTextString(m) }
func (*FieldArray) ProtoMessage()    {}
func (*FieldArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9f2c77c6b97bfe, []int{2}
}
func (m *FieldArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldArray.Merge(m, src)
}
func (m *FieldArray) XXX_Size() int {
	return m.Size()
}
func (m *FieldArray) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldArray.DiscardUnknown(m)
}

var xxx_messageInfo_FieldArray proto.InternalMessageInfo

type Decimal struct {
	Scale                *uint8   `protobuf:"varint,1,opt,name=scale,casttype=uint8" json:"scale,omitempty"`
	Value                *int32   `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Decimal) Reset()         { *m = Decimal{} }
func (m *Decimal) String() string { return proto.CompactTextString(m) }
func (*Decimal) ProtoMessage()    {}
func (*Decimal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9f2c77c6b97bfe, []int{3}
}
func (m *Decimal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decimal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decimal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decimal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decimal.Merge(m, src)
}
func (m *Decimal) XXX_Size() int {
	return m.Size()
}
func (m *Decimal) XXX_DiscardUnknown() {
	xxx_messageInfo_Decimal.DiscardUnknown(m)
}

var xxx_messageInfo_Decimal proto.InternalMessageInfo

type FieldValue struct {
	// Types that are valid to be assigned to Value:
	//	*FieldValue_VBoolean
	//	*FieldValue_VInt8
	//	*FieldValue_VUint8
	//	*FieldValue_VInt16
	//	*FieldValue_VUint16
	//	*FieldValue_VInt32
	//	*FieldValue_VUint32
	//	*FieldValue_VInt64
	//	*FieldValue_VUint64
	//	*FieldValue_VFloat
	//	*FieldValue_VDouble
	//	*FieldValue_VDecimal
	//	*FieldValue_VShortstr
	//	*FieldValue_VLongstr
	//	*FieldValue_VArray
	//	*FieldValue_VTimestamp
	//	*FieldValue_VTable
	//	*FieldValue_VBytes
	Value                isFieldValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FieldValue) Reset()         { *m = FieldValue{} }
func (m *FieldValue) String() string { return proto.CompactTextString(m) }
func (*FieldValue) ProtoMessage()    {}
func (*FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9f2c77c6b97bfe, []int{4}
}
func (m *FieldValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValue.Merge(m, src)
}
func (m *FieldValue) XXX_Size() int {
	return m.Size()
}
func (m *FieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValue proto.InternalMessageInfo

type isFieldValue_Value interface {
	isFieldValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldValue_VBoolean struct {
	VBoolean bool `protobuf:"varint,1,opt,name=v_boolean,json=vBoolean,oneof"`
}
type FieldValue_VInt8 struct {
	VInt8 int8 `protobuf:"varint,2,opt,name=v_int8,json=vInt8,oneof,casttype=int8"`
}
type FieldValue_VUint8 struct {
	VUint8 uint8 `protobuf:"varint,3,opt,name=v_uint8,json=vUint8,oneof,casttype=uint8"`
}
type FieldValue_VInt16 struct {
	VInt16 int16 `protobuf:"varint,4,opt,name=v_int16,json=vInt16,oneof,casttype=int16"`
}
type FieldValue_VUint16 struct {
	VUint16 uint16 `protobuf:"varint,5,opt,name=v_uint16,json=vUint16,oneof,casttype=uint16"`
}
type FieldValue_VInt32 struct {
	VInt32 int32 `protobuf:"varint,6,opt,name=v_int32,json=vInt32,oneof"`
}
type FieldValue_VUint32 struct {
	VUint32 uint32 `protobuf:"varint,7,opt,name=v_uint32,json=vUint32,oneof"`
}
type FieldValue_VInt64 struct {
	VInt64 int64 `protobuf:"varint,8,opt,name=v_int64,json=vInt64,oneof"`
}
type FieldValue_VUint64 struct {
	VUint64 uint64 `protobuf:"varint,9,opt,name=v_uint64,json=vUint64,oneof"`
}
type FieldValue_VFloat struct {
	VFloat float32 `protobuf:"fixed32,10,opt,name=v_float,json=vFloat,oneof"`
}
type FieldValue_VDouble struct {
	VDouble float64 `protobuf:"fixed64,11,opt,name=v_double,json=vDouble,oneof"`
}
type FieldValue_VDecimal struct {
	VDecimal *Decimal `protobuf:"bytes,12,opt,name=v_decimal,json=vDecimal,oneof"`
}
type FieldValue_VShortstr struct {
	VShortstr string `protobuf:"bytes,13,opt,name=v_shortstr,json=vShortstr,oneof"`
}
type FieldValue_VLongstr struct {
	VLongstr []byte `protobuf:"bytes,14,opt,name=v_longstr,json=vLongstr,oneof"`
}
type FieldValue_VArray struct {
	VArray *FieldArray `protobuf:"bytes,15,opt,name=v_array,json=vArray,oneof"`
}
type FieldValue_VTimestamp struct {
	VTimestamp uint64 `protobuf:"varint,16,opt,name=v_timestamp,json=vTimestamp,oneof"`
}
type FieldValue_VTable struct {
	VTable *Table `protobuf:"bytes,17,opt,name=v_table,json=vTable,oneof"`
}
type FieldValue_VBytes struct {
	VBytes []byte `protobuf:"bytes,18,opt,name=v_bytes,json=vBytes,oneof"`
}

func (*FieldValue_VBoolean) isFieldValue_Value()   {}
func (*FieldValue_VInt8) isFieldValue_Value()      {}
func (*FieldValue_VUint8) isFieldValue_Value()     {}
func (*FieldValue_VInt16) isFieldValue_Value()     {}
func (*FieldValue_VUint16) isFieldValue_Value()    {}
func (*FieldValue_VInt32) isFieldValue_Value()     {}
func (*FieldValue_VUint32) isFieldValue_Value()    {}
func (*FieldValue_VInt64) isFieldValue_Value()     {}
func (*FieldValue_VUint64) isFieldValue_Value()    {}
func (*FieldValue_VFloat) isFieldValue_Value()     {}
func (*FieldValue_VDouble) isFieldValue_Value()    {}
func (*FieldValue_VDecimal) isFieldValue_Value()   {}
func (*FieldValue_VShortstr) isFieldValue_Value()  {}
func (*FieldValue_VLongstr) isFieldValue_Value()   {}
func (*FieldValue_VArray) isFieldValue_Value()     {}
func (*FieldValue_VTimestamp) isFieldValue_Value() {}
func (*FieldValue_VTable) isFieldValue_Value()     {}
func (*FieldValue_VBytes) isFieldValue_Value()     {}

func (m *FieldValue) GetValue() isFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldValue) GetVBoolean() bool {
	if x, ok := m.GetValue().(*FieldValue_VBoolean); ok {
		return x.VBoolean
	}
	return false
}

func (m *FieldValue) GetVInt8() int8 {
	if x, ok := m.GetValue().(*FieldValue_VInt8); ok {
		return x.VInt8
	}
	return 0
}

func (m *FieldValue) GetVUint8() uint8 {
	if x, ok := m.GetValue().(*FieldValue_VUint8); ok {
		return x.VUint8
	}
	return 0
}

func (m *FieldValue) GetVInt16() int16 {
	if x, ok := m.GetValue().(*FieldValue_VInt16); ok {
		return x.VInt16
	}
	return 0
}

func (m *FieldValue) GetVUint16() uint16 {
	if x, ok := m.GetValue().(*FieldValue_VUint16); ok {
		return x.VUint16
	}
	return 0
}

func (m *FieldValue) GetVInt32() int32 {
	if x, ok := m.GetValue().(*FieldValue_VInt32); ok {
		return x.VInt32
	}
	return 0
}

func (m *FieldValue) GetVUint32() uint32 {
	if x, ok := m.GetValue().(*FieldValue_VUint32); ok {
		return x.VUint32
	}
	return 0
}

func (m *FieldValue) GetVInt64() int64 {
	if x, ok := m.GetValue().(*FieldValue_VInt64); ok {
		return x.VInt64
	}
	return 0
}

func (m *FieldValue) GetVUint64() uint64 {
	if x, ok := m.GetValue().(*FieldValue_VUint64); ok {
		return x.VUint64
	}
	return 0
}

func (m *FieldValue) GetVFloat() float32 {
	if x, ok := m.GetValue().(*FieldValue_VFloat); ok {
		return x.VFloat
	}
	return 0
}

func (m *FieldValue) GetVDouble() float64 {
	if x, ok := m.GetValue().(*FieldValue_VDouble); ok {
		return x.VDouble
	}
	return 0
}

func (m *FieldValue) GetVDecimal() *Decimal {
	if x, ok := m.GetValue().(*FieldValue_VDecimal); ok {
		return x.VDecimal
	}
	return nil
}

func (m *FieldValue) GetVShortstr() string {
	if x, ok := m.GetValue().(*FieldValue_VShortstr); ok {
		return x.VShortstr
	}
	return ""
}

func (m *FieldValue) GetVLongstr() []byte {
	if x, ok := m.GetValue().(*FieldValue_VLongstr); ok {
		return x.VLongstr
	}
	return nil
}

func (m *FieldValue) GetVArray() *FieldArray {
	if x, ok := m.GetValue().(*FieldValue_VArray); ok {
		return x.VArray
	}
	return nil
}

func (m *FieldValue) GetVTimestamp() uint64 {
	if x, ok := m.GetValue().(*FieldValue_VTimestamp); ok {
		return x.VTimestamp
	}
	return 0
}

func (m *FieldValue) GetVTable() *Table {
	if x, ok := m.GetValue().(*FieldValue_VTable); ok {
		return x.VTable
	}
	return nil
}

func (m *FieldValue) GetVBytes() []byte {
	if x, ok := m.GetValue().(*FieldValue_VBytes); ok {
		return x.VBytes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FieldValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FieldValue_OneofMarshaler, _FieldValue_OneofUnmarshaler, _FieldValue_OneofSizer, []interface{}{
		(*FieldValue_VBoolean)(nil),
		(*FieldValue_VInt8)(nil),
		(*FieldValue_VUint8)(nil),
		(*FieldValue_VInt16)(nil),
		(*FieldValue_VUint16)(nil),
		(*FieldValue_VInt32)(nil),
		(*FieldValue_VUint32)(nil),
		(*FieldValue_VInt64)(nil),
		(*FieldValue_VUint64)(nil),
		(*FieldValue_VFloat)(nil),
		(*FieldValue_VDouble)(nil),
		(*FieldValue_VDecimal)(nil),
		(*FieldValue_VShortstr)(nil),
		(*FieldValue_VLongstr)(nil),
		(*FieldValue_VArray)(nil),
		(*FieldValue_VTimestamp)(nil),
		(*FieldValue_VTable)(nil),
		(*FieldValue_VBytes)(nil),
	}
}

func _FieldValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FieldValue)
	// value
	switch x := m.Value.(type) {
	case *FieldValue_VBoolean:
		t := uint64(0)
		if x.VBoolean {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *FieldValue_VInt8:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VInt8))
	case *FieldValue_VUint8:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VUint8))
	case *FieldValue_VInt16:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VInt16))
	case *FieldValue_VUint16:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VUint16))
	case *FieldValue_VInt32:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VInt32))
	case *FieldValue_VUint32:
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VUint32))
	case *FieldValue_VInt64:
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VInt64))
	case *FieldValue_VUint64:
		_ = b.EncodeVarint(9<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VUint64))
	case *FieldValue_VFloat:
		_ = b.EncodeVarint(10<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.VFloat)))
	case *FieldValue_VDouble:
		_ = b.EncodeVarint(11<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.VDouble))
	case *FieldValue_VDecimal:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VDecimal); err != nil {
			return err
		}
	case *FieldValue_VShortstr:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.VShortstr)
	case *FieldValue_VLongstr:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.VLongstr)
	case *FieldValue_VArray:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VArray); err != nil {
			return err
		}
	case *FieldValue_VTimestamp:
		_ = b.EncodeVarint(16<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VTimestamp))
	case *FieldValue_VTable:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VTable); err != nil {
			return err
		}
	case *FieldValue_VBytes:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.VBytes)
	case nil:
	default:
		return fmt.Errorf("FieldValue.Value has unexpected type %T", x)
	}
	return nil
}

func _FieldValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FieldValue)
	switch tag {
	case 1: // value.v_boolean
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VBoolean{x != 0}
		return true, err
	case 2: // value.v_int8
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VInt8{int8(int32(x))}
		return true, err
	case 3: // value.v_uint8
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VUint8{uint8(uint32(x))}
		return true, err
	case 4: // value.v_int16
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VInt16{int16(int32(x))}
		return true, err
	case 5: // value.v_uint16
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VUint16{uint16(uint32(x))}
		return true, err
	case 6: // value.v_int32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VInt32{int32(x)}
		return true, err
	case 7: // value.v_uint32
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VUint32{uint32(x)}
		return true, err
	case 8: // value.v_int64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VInt64{int64(x)}
		return true, err
	case 9: // value.v_uint64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VUint64{x}
		return true, err
	case 10: // value.v_float
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &FieldValue_VFloat{math.Float32frombits(uint32(x))}
		return true, err
	case 11: // value.v_double
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &FieldValue_VDouble{math.Float64frombits(x)}
		return true, err
	case 12: // value.v_decimal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Decimal)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValue_VDecimal{msg}
		return true, err
	case 13: // value.v_shortstr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &FieldValue_VShortstr{x}
		return true, err
	case 14: // value.v_longstr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &FieldValue_VLongstr{x}
		return true, err
	case 15: // value.v_array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldArray)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValue_VArray{msg}
		return true, err
	case 16: // value.v_timestamp
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValue_VTimestamp{x}
		return true, err
	case 17: // value.v_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Table)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValue_VTable{msg}
		return true, err
	case 18: // value.v_bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &FieldValue_VBytes{x}
		return true, err
	default:
		return false, nil
	}
}

func _FieldValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FieldValue)
	// value
	switch x := m.Value.(type) {
	case *FieldValue_VBoolean:
		n += 1 // tag and wire
		n += 1
	case *FieldValue_VInt8:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.VInt8))
	case *FieldValue_VUint8:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.VUint8))
	case *FieldValue_VInt16:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.VInt16))
	case *FieldValue_VUint16:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.VUint16))
	case *FieldValue_VInt32:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.VInt32))
	case *FieldValue_VUint32:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.VUint32))
	case *FieldValue_VInt64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.VInt64))
	case *FieldValue_VUint64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.VUint64))
	case *FieldValue_VFloat:
		n += 1 // tag and wire
		n += 4
	case *FieldValue_VDouble:
		n += 1 // tag and wire
		n += 8
	case *FieldValue_VDecimal:
		s := proto.Size(x.VDecimal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldValue_VShortstr:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.VShortstr)))
		n += len(x.VShortstr)
	case *FieldValue_VLongstr:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.VLongstr)))
		n += len(x.VLongstr)
	case *FieldValue_VArray:
		s := proto.Size(x.VArray)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldValue_VTimestamp:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.VTimestamp))
	case *FieldValue_VTable:
		s := proto.Size(x.VTable)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldValue_VBytes:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.VBytes)))
		n += len(x.VBytes)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*FieldValuePair)(nil), "amqp.FieldValuePair")
	proto.RegisterType((*Table)(nil), "amqp.Table")
	proto.RegisterType((*FieldArray)(nil), "amqp.FieldArray")
	proto.RegisterType((*Decimal)(nil), "amqp.Decimal")
	proto.RegisterType((*FieldValue)(nil), "amqp.FieldValue")
}

func init() {
	proto.RegisterFile("github.com/karelbilek/amqp-test-server/amqp/amqp.proto", fileDescriptor_9e9f2c77c6b97bfe)
}

var fileDescriptor_9e9f2c77c6b97bfe = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xbd, 0x4d, 0x9c, 0x38, 0x9b, 0xb6, 0x94, 0x55, 0x0f, 0x0b, 0x88, 0xd8, 0xad, 0x50,
	0xb1, 0xf8, 0x48, 0x14, 0x27, 0xb2, 0x2a, 0x24, 0x90, 0xb0, 0xaa, 0x2a, 0x45, 0x1c, 0x90, 0x09,
	0x5c, 0xa3, 0x4d, 0xe2, 0x26, 0x16, 0x8e, 0x1d, 0xec, 0xf5, 0x4a, 0x7d, 0x03, 0x1e, 0x03, 0xde,
	0x86, 0x63, 0x9f, 0x20, 0x42, 0x79, 0x8c, 0x5c, 0x40, 0x3b, 0xeb, 0x7c, 0xa8, 0xbd, 0x70, 0x89,
	0x76, 0x66, 0xe7, 0xff, 0x9b, 0xc9, 0xce, 0xdf, 0xf8, 0xf5, 0x24, 0xe4, 0xd3, 0x7c, 0xd8, 0x1c,
	0x25, 0xb3, 0x56, 0x90, 0xc6, 0x41, 0xc6, 0xd3, 0x51, 0x6b, 0x1c, 0x66, 0x73, 0xc6, 0x47, 0xd3,
	0x71, 0x8b, 0xcd, 0xbe, 0xcf, 0xe1, 0xa7, 0x39, 0x4f, 0x13, 0x9e, 0x90, 0xb2, 0x3c, 0x3f, 0xde,
	0x15, 0x4d, 0x92, 0x49, 0xd2, 0x82, 0xcb, 0x61, 0x7e, 0x0d, 0x11, 0x04, 0x70, 0x52, 0xa2, 0xd3,
	0x3e, 0x3e, 0xbc, 0x0c, 0x83, 0x68, 0xfc, 0x95, 0x45, 0x79, 0xf0, 0x89, 0x85, 0x29, 0x39, 0xc2,
	0xa5, 0x6f, 0xc1, 0x0d, 0x45, 0x16, 0xb2, 0x6b, 0xbe, 0x3c, 0x92, 0x33, 0xac, 0x0b, 0x79, 0x4d,
	0xf7, 0x2c, 0x64, 0xd7, 0x9d, 0xa3, 0x26, 0x34, 0xdd, 0xca, 0x7c, 0x75, 0xfd, 0xc6, 0xf8, 0xf1,
	0xd3, 0xd4, 0x6e, 0x7f, 0x99, 0xda, 0xe9, 0x5b, 0xac, 0xf7, 0xd9, 0x30, 0x0a, 0xc8, 0x0b, 0xac,
	0x73, 0x79, 0xa0, 0xc8, 0x2a, 0xd9, 0x75, 0xe7, 0xf8, 0xae, 0x54, 0x76, 0xf4, 0x55, 0xc9, 0x8e,
	0xfc, 0x1d, 0xc6, 0x50, 0xf2, 0x3e, 0x4d, 0xd9, 0x4e, 0x7b, 0xc5, 0xf8, 0x8f, 0xf6, 0x1f, 0x70,
	0xf5, 0x22, 0x18, 0x85, 0x33, 0x16, 0x11, 0x13, 0xeb, 0xd9, 0x88, 0xc1, 0x00, 0xc8, 0x3e, 0xf0,
	0x6a, 0xab, 0x85, 0xa9, 0xe7, 0x61, 0xcc, 0xcf, 0x7d, 0x95, 0x27, 0xc7, 0xbb, 0x7f, 0x4e, 0xbf,
	0xcf, 0xfa, 0x5b, 0x2e, 0x86, 0x81, 0x5e, 0xe4, 0x29, 0xae, 0x89, 0xc1, 0x30, 0x49, 0xa2, 0x80,
	0xc5, 0xc0, 0x34, 0x7a, 0x9a, 0x6f, 0x08, 0x4f, 0x65, 0xc8, 0x09, 0xae, 0x88, 0x81, 0xc4, 0x2b,
	0x9c, 0x67, 0xac, 0x16, 0x66, 0x59, 0xc6, 0x3d, 0xcd, 0xd7, 0xc5, 0x55, 0xcc, 0xcf, 0xc9, 0x33,
	0x5c, 0x15, 0x03, 0x18, 0x81, 0x96, 0xee, 0xcc, 0xd4, 0xd3, 0xfc, 0x8a, 0xf8, 0x12, 0x6e, 0xaa,
	0xc2, 0x98, 0xb7, 0x5d, 0x5a, 0x06, 0x12, 0x54, 0x41, 0x02, 0xaa, 0xae, 0xe4, 0x89, 0x3c, 0xc7,
	0x86, 0x62, 0xb5, 0x5d, 0xaa, 0x03, 0x0c, 0xaf, 0x16, 0x66, 0x25, 0x5f, 0xd7, 0x55, 0x81, 0xd6,
	0x76, 0xc9, 0xa3, 0x02, 0xd7, 0x71, 0x68, 0x45, 0xe2, 0xd6, 0x8c, 0x8e, 0x43, 0x9e, 0xac, 0x19,
	0x1d, 0x87, 0x56, 0x25, 0x63, 0xa3, 0xeb, 0x38, 0x1b, 0x9d, 0xdb, 0xa5, 0x86, 0x85, 0xec, 0xd2,
	0x5a, 0xe7, 0x76, 0xb7, 0x3a, 0xb7, 0x4b, 0x6b, 0x16, 0xb2, 0xcb, 0x1b, 0x9d, 0xdb, 0x55, 0xba,
	0xeb, 0x28, 0x61, 0x9c, 0x62, 0x0b, 0xd9, 0x7b, 0xa0, 0xbb, 0x94, 0xb1, 0xd2, 0x8d, 0x93, 0x5c,
	0xba, 0xa2, 0x6e, 0x21, 0x1b, 0x81, 0xee, 0x02, 0x12, 0xe4, 0x95, 0x7c, 0xde, 0xb1, 0xda, 0x1d,
	0xdd, 0x07, 0xbb, 0x1d, 0xa8, 0x7d, 0x17, 0x0b, 0x85, 0xd7, 0xde, 0x2e, 0x17, 0x8b, 0x41, 0x36,
	0x4d, 0x52, 0x9e, 0xf1, 0x94, 0x1e, 0x48, 0xc7, 0xf6, 0x34, 0xbf, 0x26, 0x3e, 0x17, 0x29, 0xb5,
	0xad, 0x28, 0x89, 0x27, 0xf2, 0xfe, 0xd0, 0x42, 0xf6, 0x3e, 0xe8, 0x3f, 0xaa, 0x0c, 0x79, 0x29,
	0xa7, 0x64, 0xd2, 0x64, 0xf4, 0xc1, 0x3d, 0x6b, 0x83, 0xf9, 0x60, 0x6e, 0x65, 0xc3, 0x13, 0x5c,
	0x17, 0x03, 0x1e, 0xce, 0x82, 0x8c, 0xb3, 0xd9, 0x9c, 0x1e, 0x15, 0x7f, 0x19, 0x8b, 0xfe, 0x3a,
	0x47, 0xce, 0x24, 0x4f, 0xf9, 0xfd, 0x21, 0xf0, 0xea, 0x8a, 0x07, 0xdf, 0x02, 0xa0, 0xd4, 0x57,
	0x01, 0xaf, 0x33, 0xbc, 0xe1, 0x41, 0x46, 0x49, 0x31, 0x54, 0x45, 0x78, 0x32, 0xde, 0x1a, 0xcf,
	0xab, 0x16, 0xc6, 0xf4, 0xf6, 0x7f, 0x2f, 0x1b, 0xe8, 0x76, 0xd9, 0x40, 0x7f, 0x96, 0x0d, 0xf4,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x0a, 0x0d, 0x3c, 0x15, 0x04, 0x00, 0x00,
}

func (m *FieldValuePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValuePair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(len(*m.Key)))
		i += copy(dAtA[i:], *m.Key)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(m.Value.Size()))
		n1, err1 := m.Value.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Table) > 0 {
		for _, msg := range m.Table {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAmqp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FieldArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, msg := range m.Value {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAmqp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Decimal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decimal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Scale != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(*m.Scale))
	}
	if m.Value != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(*m.Value))
	}
	return i, nil
}

func (m *FieldValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn2, err2 := m.Value.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += nn2
	}
	return i, nil
}

func (m *FieldValue_VBoolean) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.VBoolean {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *FieldValue_VInt8) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VInt8))
	return i, nil
}
func (m *FieldValue_VUint8) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VUint8))
	return i, nil
}
func (m *FieldValue_VInt16) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VInt16))
	return i, nil
}
func (m *FieldValue_VUint16) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VUint16))
	return i, nil
}
func (m *FieldValue_VInt32) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VInt32))
	return i, nil
}
func (m *FieldValue_VUint32) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VUint32))
	return i, nil
}
func (m *FieldValue_VInt64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x40
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VInt64))
	return i, nil
}
func (m *FieldValue_VUint64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x48
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VUint64))
	return i, nil
}
func (m *FieldValue_VFloat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x55
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VFloat))))
	i += 4
	return i, nil
}
func (m *FieldValue_VDouble) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x59
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VDouble))))
	i += 8
	return i, nil
}
func (m *FieldValue_VDecimal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VDecimal != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(m.VDecimal.Size()))
		n3, err3 := m.VDecimal.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *FieldValue_VShortstr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x6a
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(len(m.VShortstr)))
	i += copy(dAtA[i:], m.VShortstr)
	return i, nil
}
func (m *FieldValue_VLongstr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VLongstr != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(len(m.VLongstr)))
		i += copy(dAtA[i:], m.VLongstr)
	}
	return i, nil
}
func (m *FieldValue_VArray) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VArray != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(m.VArray.Size()))
		n4, err4 := m.VArray.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}
func (m *FieldValue_VTimestamp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintAmqp(dAtA, i, uint64(m.VTimestamp))
	return i, nil
}
func (m *FieldValue_VTable) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VTable != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(m.VTable.Size()))
		n5, err5 := m.VTable.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	return i, nil
}
func (m *FieldValue_VBytes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VBytes != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAmqp(dAtA, i, uint64(len(m.VBytes)))
		i += copy(dAtA[i:], m.VBytes)
	}
	return i, nil
}
func encodeVarintAmqp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FieldValuePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovAmqp(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovAmqp(uint64(l))
	}
	return n
}

func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Table) > 0 {
		for _, e := range m.Table {
			l = e.Size()
			n += 1 + l + sovAmqp(uint64(l))
		}
	}
	return n
}

func (m *FieldArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovAmqp(uint64(l))
		}
	}
	return n
}

func (m *Decimal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scale != nil {
		n += 1 + sovAmqp(uint64(*m.Scale))
	}
	if m.Value != nil {
		n += 1 + sovAmqp(uint64(*m.Value))
	}
	return n
}

func (m *FieldValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *FieldValue_VBoolean) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *FieldValue_VInt8) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAmqp(uint64(m.VInt8))
	return n
}
func (m *FieldValue_VUint8) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAmqp(uint64(m.VUint8))
	return n
}
func (m *FieldValue_VInt16) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAmqp(uint64(m.VInt16))
	return n
}
func (m *FieldValue_VUint16) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAmqp(uint64(m.VUint16))
	return n
}
func (m *FieldValue_VInt32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAmqp(uint64(m.VInt32))
	return n
}
func (m *FieldValue_VUint32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAmqp(uint64(m.VUint32))
	return n
}
func (m *FieldValue_VInt64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAmqp(uint64(m.VInt64))
	return n
}
func (m *FieldValue_VUint64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAmqp(uint64(m.VUint64))
	return n
}
func (m *FieldValue_VFloat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *FieldValue_VDouble) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 9
	return n
}
func (m *FieldValue_VDecimal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VDecimal != nil {
		l = m.VDecimal.Size()
		n += 1 + l + sovAmqp(uint64(l))
	}
	return n
}
func (m *FieldValue_VShortstr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VShortstr)
	n += 1 + l + sovAmqp(uint64(l))
	return n
}
func (m *FieldValue_VLongstr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VLongstr != nil {
		l = len(m.VLongstr)
		n += 1 + l + sovAmqp(uint64(l))
	}
	return n
}
func (m *FieldValue_VArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VArray != nil {
		l = m.VArray.Size()
		n += 1 + l + sovAmqp(uint64(l))
	}
	return n
}
func (m *FieldValue_VTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovAmqp(uint64(m.VTimestamp))
	return n
}
func (m *FieldValue_VTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VTable != nil {
		l = m.VTable.Size()
		n += 2 + l + sovAmqp(uint64(l))
	}
	return n
}
func (m *FieldValue_VBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VBytes != nil {
		l = len(m.VBytes)
		n += 2 + l + sovAmqp(uint64(l))
	}
	return n
}

func sovAmqp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAmqp(x uint64) (n int) {
	return sovAmqp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FieldValuePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmqp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValuePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValuePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &FieldValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmqp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmqp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = append(m.Table, &FieldValuePair{})
			if err := m.Table[len(m.Table)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmqp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmqp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &FieldValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmqp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decimal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmqp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decimal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decimal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var v uint8
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint8(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Scale = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &v
		default:
			iNdEx = preIndex
			skippy, err := skipAmqp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmqp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VBoolean", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &FieldValue_VBoolean{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VInt8", wireType)
			}
			var v int8
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int8(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VInt8{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VUint8", wireType)
			}
			var v uint8
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint8(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VUint8{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VInt16", wireType)
			}
			var v int16
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int16(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VInt16{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VUint16", wireType)
			}
			var v uint16
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint16(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VUint16{v}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VInt32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VInt32{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VUint32", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VUint32{v}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VInt64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VInt64{v}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VUint64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VUint64{v}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VFloat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &FieldValue_VFloat{float32(math.Float32frombits(v))}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VDouble", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = &FieldValue_VDouble{float64(math.Float64frombits(v))}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VDecimal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Decimal{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_VDecimal{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VShortstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &FieldValue_VShortstr{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VLongstr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &FieldValue_VLongstr{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldArray{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_VArray{v}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VTimestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValue_VTimestamp{v}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Table{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValue_VTable{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAmqp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAmqp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &FieldValue_VBytes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmqp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAmqp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmqp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmqp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmqp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmqp
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAmqp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAmqp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAmqp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAmqp
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAmqp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmqp   = fmt.Errorf("proto: integer overflow")
)
